# Define the file path
filename := "C:/Sadegh/codes/RBD-In-Maple/rbd.txt":

# Attempt to open the file
file := fopen(filename, READ):
if file = 0 then
    error "Failed to open the file. Check the file path and permissions.";
end if:

# Initialize variables
nodes := []:
series_connections := []:
parallel_connections := []:

# Read each line from the file
line := readline(file):
while (line <> 0) do
    # Trim extra spaces
    line := StringTools:-Trim(line):

    # Process nodes
    if StringTools:-Search("Nodes:", line) = 1 then
        nodes_line := substring(line, 7..-1):  # Extract substring after "Nodes:"
        nodes := StringTools:-Split(nodes_line, ","):
        for i to nops(nodes) do
            nodes[i] := StringTools:-Trim(nodes[i]):
        end do:

    # Process series connections
    elif StringTools:-Search("Series:", line) = 1 then
        series_line := substring(line, 8..-1):  # Extract substring after "Series:"
        series_nodes := StringTools:-Split(series_line, ","):
        for i to nops(series_nodes) do
            series_nodes[i] := StringTools:-Trim(series_nodes[i]):
        end do:
        series_connections := [op(series_connections), series_nodes]:

    # Process parallel connections
    elif StringTools:-Search("Parallel:", line) = 1 then
        parallel_line := substring(line, 10..-1):  # Extract substring after "Parallel:"
        parallel_nodes := StringTools:-Split(parallel_line, ","):
        for i to nops(parallel_nodes) do
            parallel_nodes[i] := StringTools:-Trim(parallel_nodes[i]):
        end do:
        parallel_connections := [op(parallel_connections), parallel_nodes]:
    end if:

    # Read the next line
    line := readline(file):
end do:

# Close the file
fclose(file):

# Output the parsed structure for verification
print("Nodes: ", nodes):
print("Series Connections: ", series_connections):
print("Parallel Connections: ", parallel_connections):

# Define reliability for each node
R := table():
for i to nops(nodes) do
    node := nodes[i]:
    R[node] := parse(cat("R", node)):  # Reliability for each node
end do:

# Function to compute series reliability
ReliabilitySeries := proc(rs)
    local i, result;
    result := 1;
    for i from 1 to nops(rs) do
        result := result * R[rs[i]]:
    end do:
    return result:
end proc:

# Function to compute parallel reliability
ReliabilityParallel := proc(rp)
    local i, result;
    result := 1;
    for i from 1 to nops(rp) do
        result := result * (1 - R[rp[i]]):
    end do:
    return 1 - result:
end proc:

# Compute reliability for series connections
Rs := 1:
for i to nops(series_connections) do
    Rs := Rs * ReliabilitySeries(series_connections[i]):
end do:

# Compute reliability for parallel connections
Rp := 1:
for i to nops(parallel_connections) do
    Rp := Rp * ReliabilityParallel(parallel_connections[i]):
end do:

# Calculate total reliability
R_total := Rs * Rp:

# Simplify the result
R_total_simplified := simplify(R_total):

# Print the result
printf("Reliability of the system is: %a\n", R_total_simplified);
